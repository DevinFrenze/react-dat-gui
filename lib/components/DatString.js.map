{"version":3,"sources":["../../src/components/DatString.jsx"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;;;;;IAEM,S;;;AAYF,uBAAY,KAAZ,EAAmB,OAAnB,EAA4B;AAAA;;AAAA,iGAClB,KADkB,EACX,OADW;;AAExB,cAAK,YAAL,GAAoB,MAAK,YAAL,CAAkB,IAAlB,OAApB;AACA,cAAK,UAAL,GAAkB,MAAK,UAAL,CAAgB,IAAhB,OAAlB;AAHwB;AAI3B;;;;6CAEoB;AACjB,iBAAK,QAAL,CAAc;AACV,uBAAO,KAAK,QAAL;AADG,aAAd;AAGH;;;kDAEyB,S,EAAW;AACjC,iBAAK,QAAL,CAAc;AACV,uBAAO,KAAK,QAAL,CAAc,SAAd;AADG,aAAd;AAGH;;;8CAEqB,S,EAAW,S,EAAW;AACxC,mBAAO,UAAU,EAAV,KAAiB,KAAK,KAAL,CAAW,EAA5B,IACA,UAAU,IAAV,KAAmB,KAAK,KAAL,CAAW,IAD9B,IAEA,UAAU,KAAV,KAAoB,KAAK,KAAL,CAAW,KAF/B,IAGA,UAAU,KAAV,KAAoB,KAAK,KAAL,CAAW,KAHtC;AAIH;;;mCAE4B;AAAA,gBAApB,KAAoB,yDAAZ,KAAK,KAAO;;AACzB,mBAAO,oBAAO,MAAM,IAAb,EAAmB,MAAM,IAAzB,CAAP;AACH;;;qCAEY,K,EAAO;AAAA;;AAChB,gBAAM,QAAQ,MAAM,MAAN,CAAa,KAA3B;AACA,iBAAK,QAAL,CAAc,EAAE,YAAF,EAAd,EAAyB,YAAM;AAC3B,uBAAK,KAAL,CAAW,UAAX,IAAyB,OAAK,MAAL,EAAzB;AACH,aAFD;AAGH;;;mCAEU,K,EAAO;AACd,mBAAO,YAAP,GAAsB,eAAtB;AACA,aAAC,KAAK,KAAL,CAAW,UAAZ,IAA0B,KAAK,MAAL,EAA1B;AACH;;;iCAEQ;AAAA,gBACG,KADH,GACa,KAAK,KADlB,CACG,KADH;;AAEL,iBAAK,KAAL,CAAW,cAAX,IAA6B,KAAK,KAAL,CAAW,cAAX,CAA0B,KAAK,KAAL,CAAW,IAArC,EAA2C,KAA3C,CAA7B;AACA,iBAAK,KAAL,CAAW,QAAX,IAAuB,KAAK,KAAL,CAAW,QAAX,CAAoB,KAApB,CAAvB;AACH;;;iCAEQ;AAAA,gBACG,EADH,GACU,KAAK,KADf,CACG,EADH;AAAA,gBAEG,KAFH,GAEa,KAAK,KAFlB,CAEG,KAFH;;AAGL,gBAAM,QAAQ,sBAAS,KAAK,KAAL,CAAW,KAApB,IAA6B,KAAK,KAAL,CAAW,KAAxC,GAAgD,KAAK,KAAL,CAAW,IAAzE;AACA,mBACI;AAAA;gBAAA,EAAI,WAAU,WAAd;gBACI;AAAA;oBAAA,EAAO,SAAS,EAAhB;oBAAqB;AAArB,iBADJ;gBAEI;AACI,0BAAK,MADT;AAEI,wBAAI,EAFR;AAGI,2BAAO,KAHX;AAII,8BAAU,KAAK,YAJnB;AAKI,4BAAQ,KAAK,UALjB;AAFJ,aADJ;AAWH;;;;EA1EmB,gBAAM,S;;AAAxB,S,CAEK,S,GAAY;AACf,QAAI,iBAAU,MADC;AAEf,UAAM,iBAAU,MAFD;AAGf,UAAM,iBAAU,MAHD;AAIf,WAAO,iBAAU,MAJF;AAKf,gBAAY,iBAAU,IALP;AAMf,cAAU,iBAAU,IANL;AAOf,oBAAgB,iBAAU;AAPX,C;kBA4ER,S","file":"DatString.js","sourcesContent":["import { isString, result } from 'lodash';\nimport React, { PropTypes } from 'react';\n\nclass DatString extends React.Component {\n\n    static propTypes = {\n        id: PropTypes.string,\n        data: PropTypes.object,\n        path: PropTypes.string,\n        label: PropTypes.string,\n        liveUpdate: PropTypes.bool,\n        onUpdate: PropTypes.func,\n        _onUpdateValue: PropTypes.func,\n    };\n\n    constructor(props, context) {\n        super(props, context);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n    }\n\n    componentWillMount() {\n        this.setState({\n            value: this.getValue()\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            value: this.getValue(nextProps)\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps.id !== this.props.id ||\n               nextProps.path !== this.props.path ||\n               nextProps.label !== this.props.label ||\n               nextState.value !== this.state.value;\n    }\n\n    getValue(props = this.props) {\n        return result(props.data, props.path);\n    }\n\n    handleChange(event) {\n        const value = event.target.value;\n        this.setState({ value }, () => {\n            this.props.liveUpdate && this.update();\n        });\n    }\n\n    handleBlur(event) {\n        window.getSelection().removeAllRanges();\n        !this.props.liveUpdate && this.update();\n    }\n\n    update() {\n        const { value } = this.state;\n        this.props._onUpdateValue && this.props._onUpdateValue(this.props.path, value);\n        this.props.onUpdate && this.props.onUpdate(value);\n    }\n\n    render() {\n        const { id } = this.props;\n        const { value } = this.state;\n        const label = isString(this.props.label) ? this.props.label : this.props.path;\n        return (\n            <li className=\"cr string\">\n                <label htmlFor={id}>{label}</label>\n                <input\n                    type=\"text\"\n                    id={id}\n                    value={value}\n                    onChange={this.handleChange}\n                    onBlur={this.handleBlur} />\n            </li>\n        );\n    }\n\n}\n\nexport default DatString;\n"]}