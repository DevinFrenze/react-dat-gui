{"version":3,"sources":["../../src/components/DatString.jsx"],"names":[],"mappings":"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","file":"DatString.js","sourcesContent":["import result from 'lodash.result';\nimport isString from 'lodash.isstring';\nimport React, { PropTypes } from 'react';\n\nclass DatString extends React.Component {\n\n    static propTypes = {\n        data: PropTypes.object,\n        path: PropTypes.string,\n        label: PropTypes.string,\n        labelWidth: PropTypes.number,\n        liveUpdate: PropTypes.bool,\n        onUpdate: PropTypes.func,\n        _onUpdateValue: PropTypes.func,\n    };\n\n    constructor(props, context) {\n        super(props, context);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n\n    componentWillMount() {\n        this.setState({\n            value: this.getValue()\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            value: this.getValue(nextProps)\n        });\n    }\n\n    getValue(props = this.props) {\n        return result(props.data, props.path);\n    }\n\n    handleChange(event) {\n        const value = event.target.value;\n        this.setState({ value }, () => {\n            this.props.liveUpdate && this.update();\n        });\n    }\n\n    handleFocus(event) {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleBlur(event) {\n        document.removeEventListener('keydown', this.handleKeyDown);\n        window.getSelection().removeAllRanges();\n        !this.props.liveUpdate && this.update();\n    }\n\n    handleKeyDown(event) {\n        const key = event.keyCode || event.which;\n        if (key === 13) {\n            !this.props.liveUpdate && this.update();\n        }\n    }\n\n    update() {\n        const { value } = this.state;\n        this.props._onUpdateValue && this.props._onUpdateValue(this.props.path, value);\n        this.props.onUpdate && this.props.onUpdate(value);\n    }\n\n    render() {\n        const { path, label, labelWidth } = this.props;\n        const labelText = isString(label) ? label : path;\n        return (\n            <li className=\"cr string\">\n                <label>\n                    <span className=\"label-text\" style={{ width: `${labelWidth}%` }}>{labelText}</span>\n                    <input\n                        type=\"text\"\n                        value={this.state.value}\n                        style={{ width: `${100 - labelWidth}%` }}\n                        onChange={this.handleChange}\n                        onFocus={this.handleFocus}\n                        onBlur={this.handleBlur} />\n                </label>\n            </li>\n        );\n    }\n\n}\n\nexport default DatString;\n"]}